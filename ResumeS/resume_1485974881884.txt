<html xmlns="http://www.w3.org/1999/xhtml"><head><title /></head><body><p>::::WEB DRIVER::::

Browser based testing is done as well as Rest based testing...its an interface.
used for automation of different kinds of test....contains only abstract methods


When we first start with selenium automation our very first line of code comes as :-
WebDriver driver = new FireFoxDriver;

Have we ever thought what is the meaning of this code of line ...WebDriver driver ?
Simple answer to this is "WebDriver is an Interface,and we are defining a reference variable(driver) 
whose type is an interface.Now any object we assign to it must be an instance of a class(FireFoxDriver) that implements the interface."

ASSERT AND VERIFY....DIFFERENCE::
Assert and verify command is used to check a condition if it is true or false...any given condition...in case of looking for a web element.
if assert result into false...your test execution will stop...not execute next number of lines..if condition is failing,test will come to a halt...
but if you are verifying something and that conditions breaks still it will keep on executing the rest of the steps...validating and verifying the rest number 
of codes.
Let’s say we assert whether the given element is present on the web page or not. If the condition is true then the program control will execute 
the next test step but if the condition is false, the execution would stop and no further test would be executed.

If we add try catch block to assertion...it means handling the exceptions.
It is possible to have try block without catch block by using finally block

WHAT IS SELENIUM IDE???

is an add on for firefox browser..initially came with selenium automation framework using which we have play and record feature...
where we can record whatever you are doing on your browser and can use that as scripts to execute your automation steps.

FindELement and FindElements and their difference::
FindElement...returns a single web element.
FindElements...returns a list of web elements

FindElements...can be used when we have a navigational bar.
like a list..from a table...when we try to access more than one element
findElement () will return only single WebElement and if that element is not located or we use some wrong selector then it will throw NoSuchElement exception.

findElements() will return List of WebElements – for this we need to give locator in such a way that it can find multiple elements and will return you 
list of webelements then using List we can iterate and perform our operation.
If not found any element on current page as per given element locator mechanism, it will return empty list.

two methods in the webdriver interface.
FE to locate single web element...one element that you are looking for.
FEs to locate a list of web elements.


WHAT IS THE DIFFERENCE BETWEEN DRIVER.QUIT() AND DRIVER.CLOSE()

Driver.Quit() will close all the windows that the webdriver has opened.

Driver.close() will close only one window that is your current window.



WHAT ARE THE VARIOUS BROWSERS THAT WEB DRIVER SUPPORTS???
Firefox,Chrome,IE, Safari and Opera...and then it comes with a native browser which is the HTML unit(a GUI less and a headless browser)

I HAVE AUTOMATED A WEBSITE...WHEN I AM TESTING THE MANUAL TEST ...IT IS WORKING FINE BUT USING MY AUTOMATION SCRIPT THE 
TEST IS FAILING...WHAT CAN BE THE REASON AND HOW CAN YOU TRACK IT.

Tools you can use..
For tracking what is wrong in your script..we have integrated log4j...we were tracking the failing steps by reading the logs...
reasons could be that my element has changed or the page is loading slow and the driver could not locate the elements...so I try to use various waits.

HOW HAVE YOU MANAGED ALERTS USING AUTOMATION??
In our web driver we have an interface called alert interface...which is used to handle the pop ups..it automates the process of handling the 
pop ups...its a new window on our web page..we need to take control of the pop up window..using switchto method or using window handle to move to the 
alert...so if we switch to that window...the automation control will go to the alert....we have a method alert.accept which will accept the alert
and alert.dismiss which will close the window..
this is how we handle alerts.

WebDriver offers the users with a very efficient way to handle these pop ups using Alert interface.
There are the four methods that we would be using along with the Alert interface.

void dismiss() – The dismiss() method clicks on the “Cancel” button as soon as the pop up window appears.
void accept() – The accept() method clicks on the “Ok” button as soon as the pop up window appears.
String getText() – The getText() method returns the text displayed on the alert box.
void sendKeys(String stringToSend) – The sendKeys() method enters the specified string pattern into the alert box.
Syntax:
Alert alert = driver.switchTo().alert();
alert.accept();

How can we handle windows based pop up?

Selenium is an automation testing tool which supports only web application testing, that means, it doesn’t support testing of windows based applications. 
However Selenium alone can’t help the situation but along with some third party intervention, this problem can be overcome.
There are several third party tools available for handling window based pop ups along with the selenium like AutoIT, Robot class etc.
http://www.softwaretestinghelp.com/handle-alerts-popups-selenium-webdriver-selenium-tutorial-16/

How to mouse hover on a web element using WebDriver?

WebDriver offers a wide range of interaction utilities that the user can exploit to automate mouse and keyboard events.
Action Interface is one such utility which simulates the single user interactions.
Sample Code:
// Instantiating Action Interface

Actions actions=new Actions(driver);

// howering on the dropdown

actions.moveToElement(driver.findElement(By.id("id of the dropdown"))).perform();

// Clicking on one of the items in the list options

WebElement subLinkOption=driver.findElement(By.id("id of the sub link"));
subLinkOption.click();


How to refresh a application window using Action class?

Actions oAction=new Actions(selenium);
 oActions.keyDown(Keys.CONTROL).sendKeys(Keys.F5).perform();

How to perform mouseHover function in Selenium WebDriver using Java? 
Actions action = new Actions(webdriver);
WebElement we = webdriver.findElement(By.xpath("html/body/div[13]/ul/li[4]/a"));
action.moveToElement(we).moveToElement(webdriver.findElement(By.xpath("/expression-here"))).click().build().perform();


How to perform drag and drop in selenium 2.0?
Answer:
WebElement source  =  driver.findElement(By.id("Source ElementID"));
WebElement destination  =  driver.findElement(By.id("Target ElementID"));

Actions builder = new Actions(driver);
builder.dragAndDrop(source, destination).perform();

how to perform right click operation in webdriver.
Sometimes you'll run into an app that has functionality hidden behind a right-click menu (a.k.a. a context menu).
These menus tend to be system level menus that are untouchable by Selenium.
By leveraging Selenium's Action Builder we can issue a right-click command (a.k.a. a context_click).

We can then select an option from the menu by traversing it with keyboard arrow keys (which we can issue with the Action Builder's send_keys command). 
Actions action = new Actions(driver).contextClick(element);
action.build().perform();

SELECTING MULTIPLE OPTIONS USING ACTIONS API.
List&lt;WebElement&gt; listItems = driver.findElements(By.cssSelector("ol#selectable *"));
Actions builder = new Actions(driver);
builder.clickAndHold(listItems.get(1)).clickAndHold(listItems.get(2)).click();
Action selectMultiple = builder.build();
selectMultiple.perform();
}

SLIDING::
WebElement draggable = driver.findElement(By.className("ui-slider-handle"));
new Actions(driver).dragAndDropBy(draggable, 120, 0).build().perform();


TO TAKE SCREENSHOT:::

To Capture Screenshot in WebDriver when some kind of error or exception surfaces while practicing testing, 
to resolve the same WebDriver has provided us one interface TakesScreenshot for capturing the screenshot of web application and 
This interface provides one method names as getScreenshotAs() to capture screenshot in instance of driver. 
This getScreenshotAs() method takes argument of type OutputType.File or OutputType.BASE64 or Output.BYTES. So that it could return captured screenshot in 
File type, or Base 64 string type or in raw bytes.

So this would look like this
For File type
File scrnshot= ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);
We have taken the screenshot with the help of getScreenshotsAs() method and  and now its time to copy this file somewhere in our file system or in our desktop. 
So for this purpose we further use copyFile() method of the FileUtils class from the org.apache.commons.io.FileUtils class.

Placing file in file system by using this line

FileUtils.copyFile(scrFile, new File(“e:\main_page.png”));

 If no filename is given, the screenshot is saved into file selenium-screenshot-{index}.png under the directory where the Robot Framework 
 log file is written into. The filename is also considered relative to the same directory, if it is not given in absolute format.
 If an absolute or relative path is given but the path does not exist it will be created

For Base64 string above code would be like
((TakesScreenshot)driver).getScreenshotAs(OutputType.BASE64);

For BYTES
((TakesScreenshot)driver).getScreenshotAs(OutputType.BYTES);


How to take screenshot using Webdriver? use TakesScreenshot api.
In selenium webdriver, we can take the screen shot using the below command.
File scrFile = ((TakesScreenshot)driver).getScreenshotAs(outputType.FILE);
 //The below method will save the screen shot in d drive with name "screenshot.png"
 
FileUtils.copyFile(scrFile, new File("D:\\screenshot.png"));

One thing we need to remember whenever we work with File system or java.io then chances of exception is more so we would use try and catch in our code.

outputType is a method

take screen shot for error...weh we want to log some negative test case...to report error,catch block to take screen shot and save screen

What is Object Repository? How can we create Object Repository in Selenium?

Object Repository is a term used to refer to the collection of web elements belonging to Application Under Test (AUT) 
along with their locator values. Thus, whenever the element is required within the script, the locator value can be populated 
from the Object Repository. Object Repository is used to store locators in a centralized location instead of hard coding them within the scripts.
In Selenium, objects can be stored in an excel sheet which can be populated inside the script whenever required.



HOW DO YOU ACHIEVE SYNCHRONISATION IN YOUR AUTOMATION??

Synchronisation in java..hardcore synchronisation...at a time one process/thread is going to be executed...
so similarly...when we want synchronisation in automation...we want the control to be executing only one thing at a time we implement waits..we want the element 
to be present first..waiting for the element to come first...thats how we synchronise...in webdriver...we can achieve it using waits..
explicit or implicit wait..

How do you achieve synchronization in WebDriver ?

Ans- We can use implicit wait.

Syntax- driver.manage().timeouts().implicitlyWait(10,TimeUnit.SECONDS);

Here it will wait for 10sec if while execution driver did not find the element in the page immediately.
This code will attach with each and every line of the script automatically. It is not required to write every time.
Just write it once after opening the browser.

There are two types of waits available in WebDriver:

Implicit Wait: Implicit waits are used to provide a default waiting time (say 30 seconds) between each consecutive test step/command across 
the entire test script. Thus, subsequent test step would only execute when the 30 seconds have elapsed after executing the previous test step/command.
During Implicit wait if the Web Driver cannot find it immediately because of its availability, the WebDriver will wait for mentioned time and 
it will not try to find the element again during the specified time period. Once the specified time is over, 
it will try to search the element once again the last time before throwing exception.
The default setting is zero. Once we set a time, the Web Driver waits for the period of the WebDriver object instance.
Dynamically loaded ...but not sure which element will take time..so we provide wait for all the elements to be loaded...


Explicit Wait: Explicit waits are used to halt the execution till the time a particular condition is met or the maximum time has elapsed.
Unlike Implicit waits, explicit waits are applied for a particular instance only.
There can be instance when a particular element takes more than a minute to load. In that case you definitely not like to set a huge time to Implicit wait, 
as if you do this your browser will going to wait for the same time for every element.
Explicit Wait
It is more extendible in the means that you can set it up to wait for any condition you might like. Usually,
you can use some of the prebuilt ExpectedConditions to wait for elements to become clickable, visible, invisible, etc.
When you know which element will take time...like alert window..actions api..in that case we use explicit wait.

WebDriverWait wait = new WebDriverWait(driver, 10);
WebElement element = wait.until(ExpectedConditions.elementToBeClickable(By.id("someid")));
isEnabled,isVisible,isDisabled


To avoid that situation you can simply put a separate time on the required element only. By following this your browser implicit wait time would be short 
for every element and it would be large for specific element.


Fluent Wait: Let’s say you have an element which sometime appears in just 1 second and some time it takes minutes to appear. 
In that case it is better to use fluent wait, 
as this will try to find element again and again until it finds it or until the final timer runs out.

Each FluentWait instance defines the maximum amount of time to wait for a condition, as well as the frequency with which to check the condition.
 Furthermore, the user may configure the wait to ignore specific types of exceptions whilst waiting, 
 such as NoSuchElementExceptions when searching for an element on the page.



Wait&lt;WebDriver&gt; wait = new FluentWait&lt;WebDriver&gt;(driver)
        .withTimeout(30, TimeUnit.SECONDS)
        .pollingEvery(5, TimeUnit.SECONDS)
        .ignoring(NoSuchElementException.class);

WebElement wb = wait.until(
        new Function&lt;WebDriver, WebElement&gt;() {
            public WebElement apply(WebDriver driver) {
                return driver.findElement(locator);
            }
        }
    );
    return wb;

 How to type in a textbox using Selenium?
User can use sendKeys(“String to be entered”) to enter the string in the textbox.
Syntax:
WebElement username = drv.findElement(By.id(“Email”));
// entering username
username.sendKeys(“sth”);

How can you find if an element in displayed on the screen?

WebDriver facilitates the user with the following methods to check the visibility of the web elements. 
These web elements can be buttons, drop boxes, checkboxes, radio buttons, labels etc.
isDisplayed()
isSelected()
isEnabled()
Syntax:

isDisplayed():
boolean buttonPresence = driver.findElement(By.id(“gbqfba”)).isDisplayed();

isSelected():
boolean buttonSelected = driver.findElement(By.id(“gbqfba”)).isDisplayed();

isEnabled():
boolean searchIconEnabled = driver.findElement(By.id(“gbqfb”)).isEnabled();


How can we get a text of a web element?

Get command is used to retrieve the inner text of the specified web element. The command doesn’t require any parameter but returns a string value.
It is also one of the extensively used commands for verification of messages, labels, errors etc displayed on the web pages.
Syntax:
String Text = driver.findElement(By.id(“Text”)).getText();

Overcome the exceptions by using wait...but if we are unsure we can use try catch block...any type of logging like testng,log4j...in the try catch block.


SELECTING DROPDOWN:
there are three ways to select the desired value in the dropdown amongst the listed one.
selectByValue()
selectByVisibleText()
selectByIndex()
Select dropdown = new Select(driver.findElement(By.id("flowers")));

dropdown.selectByVisibleText("Aster");

or

dropdown.selectByIndex(1);

or

 dropdown.selectByValue("Pink");

DIFFERENCE BETWEEN WEBDRIVER AND SELENIUM RC:

WHAT APIS YOU HAVE WORKED WITH IN AUTOMATION:
Screenshot api,select api,draganddrop api...when working with security i worked with cookies api.

WHAT KIND OF LOCATORS YOU HAVE USED AND WHICH ONE ACCORDING TO YOU IS THE BEST ONE?

When using with elements I use x-path...prefer to use CSS selector which is fast and more stable...more compatible with other browsers
There are around 8 locators...classname,id,name,tagname,linkedtext,partial linkedtext....
if I sure about the id and name...they are not going to change I would use id and name as that is faster ...
so obviously an add on to performance of my framework

else I would go with x-path and css selector...personal favorite would be css as it is more compatible with different browsers



HOW DOES XPATH DIFFER FROM CSS::

xpath -you can go up and down..css can go up...but it is faster.
X-path refers to xml path language...css stands for cascading sheet style.
X path is a query language and css is used for formatting the documents written in markup language.
Integer type is not supported in xpath while css supports it.
Boolean and node-set functions are supported by xpath and not by css.
Xpath syntax is of two types abbreviated syntax and full syntax..while css has simple syntax and uses more english language
Xpath syntax has a location path that includes axis,node test and predicates...while css consists of a list of rules that 
include selectors and declaration block
Xpath engines are different in each browser which makes it inconsistent..whereas css us consistent in every browser.
Xpath locators rely on the structure of a page...while CSS locators rely on structure and attribute of the page to find elements.
Xpath supports all the property value expressions...In css,property values cannot be specified.
Xpath is less flexible than css.
Xpath requires more HTTP requests,hence it has slower loading of web pages while using css the website loads faster as it has lower HTTP requests.
Xpath can traverse down and up the DOM while Css can only traverse down the DOM.






Xpath is used to locate a web element based on its XML path. XML stands for Extensible Markup Language and is used to store, organize and 
transport arbitrary data. It stores data in a key-value pair which is very much similar to HTML tags. Both being markup languages and 
since they fall under the same umbrella, Xpath can be used to locate HTML elements.

The fundamental behind locating elements using Xpath is the traversing between various elements across the entire page and thus enabling 
a user to find an element with the reference of another element.

What is the difference between “/” and “//” in Xpath?

Single Slash “/” – Single slash is used to create Xpath with absolute path i.e. the xpath would be created to start selection from the document node/start node.

Double Slash “//” – Double slash is used to create Xpath with relative path i.e. the xpath would be created to start selection 
from anywhere within the document.

Absolute xpaths are prone to more regression as slight change in DOM makes them invalid or refer to a wrong element
Absolute Xpath: It uses Complete path from the Root Element to the desire element.

Relative Xpath: You can simply start by referencing the element you want and go from there.

Always Relative Xpaths are preferred as they are not the complete paths from the Root element. (//html//body) 
Because in future any of the webelement when added/Removed then Absolute Xpath changes. So Always use Relative Xpaths in your Automation.
We are navigating element one by one,..if one element changes...it cause change in the path..so relative xpath is preferred.


partiallinked text and linked text
# is for id
and . is for class

what is htmlunit driver?
What is Headless testing/Headless browser in Automation?

Ans-A browser, which does not have any GUI it means which runs in background.
 If you run your programs in Firefox, Chrome, IE and different browser then you can see 
 how the browser is behaving but in headless browsers, you cannot .

Advantage and Disadvantage of headless browsers or Why should I use this?

Ans-One of the most Important advantage is Performance.

1-When we run your test case using headless browsers then you will get result just in seconds, you will see the result in below program.

2-When we have to run test case to create some sample test data or just you have to verify some messages and
 functionality then you can should try headless browsers.

3- When we have to run test case in remote machine or server, which does not have any browser, 
but still you have to execute test case then you can try with headless browsers again.

I hope you get the clear picture of this so let us start with some program and output as well.

There are so many headless browser available in market, which do the same like Nodejs etc.

When you build your test case using Jenkins then also it run in Headless mode.

Can we run JS code using webdriver-if yes,syntax.

checking the functionality of pages ..etc
create the driver using js executor

....driver.executescript.


how to perform right click operation in webdriver.
Sometimes you'll run into an app that has functionality hidden behind a right-click menu (a.k.a. a context menu).
These menus tend to be system level menus that are untouchable by Selenium.
By leveraging Selenium's Action Builder we can issue a right-click command (a.k.a. a context_click).

We can then select an option from the menu by traversing it with keyboard arrow keys (which we can issue with the Action Builder's send_keys command). 
Actions action = new Actions(driver).contextClick(element);
action.build().perform();

SELECTING MULTIPLE OPTIONS USING ACTIONS API.
List&lt;WebElement&gt; listItems = driver.findElements(By
.cssSelector("ol#selectable *"));
Actions builder = new Actions(driver);
builder.clickAndHold(listItems.get(1)).clickAndHold(listItems.get(2))
.click();
Action selectMultiple = builder.build();
selectMultiple.perform();
}

SLIDING::
WebElement draggable = driver.findElement(By
.className("ui-slider-handle"));
new Actions(driver).dragAndDropBy(draggable, 120, 0).build().perform();

What are the different types of navigation commands?

Following are the navigation commands:
navigate().back() – The above command requires no parameters and takes back the user to the previous webpage in the web browser’s history.

Sample code:
driver.navigate().back();

navigate().forward() – This command lets the user to navigate to the next web page with reference to the browser’s history.

Sample code:
driver.navigate().forward();

navigate().refresh() – This command lets the user to refresh the current web page there by reloading all the web elements.

Sample code:
driver.navigate().refresh();

navigate().to() – This command lets the user to launch a new web browser window and navigate to the specified URL.

Sample code:
driver.navigate().to(“https://google.com”);

Actions actions = new Actions(getDriver());
    actions.sendKeys(Keys.TAB);
    actions.sendKeys(Keys.SPACE).perform();


How to handle frame in WebDriver?

An inline frame acronym as iframe is used to insert another document with in 
the current HTML document or simply a web page into a web page by enabling nesting.

Select iframe by id
driver.switchTo().frame(“ID of the frame“);

Locating iframe using tagName
driver.switchTo().frame(driver.findElements(By.tagName(“iframe”).get(0));

Locating iframe using index

frame(index)
driver.switchTo().frame(0);


frame(Name of Frame)
driver.switchTo().frame(“name of the frame”);

after switching inside a frame selenium we will be able to operate on elements.

driver.findElement(//*[@id=’username’]).sendKeys(“username”);
driver.findElement(//*[@id=’pass’]).sendKeys(“password”);




frame(WebElement element)
Select Parent Window
driver.switchTo().defaultContent();






Switch to Frames by Index:
Index of an iFrame is the position at which it occurs in the HTML page. In the above example we have found total number of iFrames. 
In the sample page we have two IFrames, index of iFrame starts from 0. So there are two iFrames on the page with index 0 and 1.
driver.switchTo().frame(int iframnumber);//pass frame number as parameter.
driver.switchTo().frame(0);

Switch to Frames by Name:
Now if you take a look at the HTMLcode of iFrame you will find that it has Name attribute. Name attribute has a value iframe_name1. 
driver.switchTo().frame(String frameName); //pass frame name as parameter.
driver.switchTo().frame("iframe_name1");

Switch to Frame by ID:
Similar to the name attribute in the iFrame tag we also have the ID attribute. We can use that also to switch to the frame.
driver.switchTo().frame(String Id); //pass frame id as parameter.
driver.switchTo().frame("iFram_id1");

Switch to Frame by Web Element:
iFrame by simply passing the iFrame WebElement to the driver.switchTo().frame() command. First find the iFrame element using any of the locator strategies and then passing it to switchTo command
driver.switchTo().frame(WebElement locator ); 
driver.switchTo().frame(driver.findElement(By.id("iFram_id1")));



"DEPENDENCY INJECTION..if your class requires a page driver(saY)
...we need to create a new object within the class
instead we can pass the dependency from wherever we are calling it..
instead of creating new driver..we will pass it through the constructor
using this."



http://stackoverflow.com/questions/23011836/how-to-open-a-new-tab-using-selenium-webdriver-and-start-the-link


Scrolling down page using which interface?

javascript executor.

http://www.ufthelp.com/2014/11/what-is-javascriptexecutor-in-selenium.html

how to get title by javascriptexecutor-in-selenium??


Robot class:
Now let’s discuss about Robot class in Webdriver.

Using Robot class, we can simulate keyboard event in Selenium.

To use keyboard event you have to use to method of Robot class.

Robot Class in Selenium Webdriver
keyPress()

keyRelease()

Each key has to be press and release respectively-

Scenario- Which cover enter key

1-Open Facebook.

2- Enter Username and password.

3- Using robot class press Enter button. 

http://www.guru99.com/using-robot-api-selenium.html

VK_ENTER...is virtual key.

robot.mousePress(InputEvent.BUTTON3_DOWN_MASK); for right click

robot.mousePress(InputEvent.BUTTON1_DOWN_MASK); for left click.


WHAT IS JAVASCRIPTEXECUTOR AND WHY DO WE USE IT:::

Sometimes we cannot handle some conditions or problems with Webdriver, web controls don’t react well against selenium commands. 
In this kind of situations, we use Javascript. It is useful for custom synchronizations, hide or show the web elements, change values, 
test flash/HTML5 and so on. In order to do these, we can use Selenium’s JavascriptExecutor interface which executes JavaScript through Selenium driver. 
It has “executeScript” &amp; “executeAsyncScript” methods, to run JavaScript on current browser.

JavaScriptExecutor is an interface which provides mechanism to execute Javascript through selenium driver. 
It provides “executescript” &amp; "executeAsyncScript" methods, to run JavaScript in the context of the currently selected frame or window.

DIFFERENCE BETWEEN EXECUTESCRIPT AND EXECUTEASYNCSCRIPT:::::
[executeAsyncScript] Execute an asynchronous piece of JavaScript in the context of the currently selected frame or window. 
Unlike executing synchronous JavaScript, scripts executed with this method must explicitly signal they are finished by invoking the provided callback. 
This callback is always injected into the executed function as the last argument.

use executeAsyncScript when you care about a return value in a calling script, but that return value won't be available immediately. 
This is especially necessary if you can't poll for the result, but must get the result using a callback or promise (which you must translate to callback yourself).


                                                                                                           
((JavascriptExecutor) driver).executeScript("alert('Hello');");
                                                                                                                                                                                                                                                                                                                                
((JavascriptExecutor) driver).executeAsyncScript() is used when the JS takes time to execute e.g.in a Web Service call.
                                                                                                                                                                                                                                                                                                                                
window.onload makes sure the JS is executed when the page is loaded completely

JavaSrcriptExecutor jse=(JavascriptExecutor)driver
jse.executeScript("window.scrollBy(0,-150);");

executeAsyncScript -&gt; This method doesn't block the execution of next line of code...till execution of this method is completed.
This method will execute as well as next line of code will be executed...asynchronously. (without blocking each other)
executeScript -&gt; This method will block the execution till it's execution is completed and then it moves to next line of code. 
In short your automation code will halt till the Javascript is executed via this method.
Here is a small piece of example...which you can try...Though it's written in C# (please modify for Java Compatibility)


IWebDriver driver= new InternetExplorerDriver();
        driver.Navigate().GoToUrl("http://www.google.com");
        IJavaScriptExecutor js = (IJavaScriptExecutor) driver;
        Console.WriteLine("Entering the Async Call");
        driver.Manage().Timeouts().SetScriptTimeout(new TimeSpan(0,0,4));
        js.ExecuteAsyncScript("setInterval(function(){ alert('Hello');},3000); callback();");
        Console.WriteLine("Exiting the Async Call");

        Console.WriteLine("Entering the Sync Call");
        Console.WriteLine(js.ExecuteScript("return document.title"));
        Console.WriteLine("Exiting the Sync Call");
        Console.ReadLine();


By running the above example , you will find that Javascript code in executeAsyncScript will run after the complete automation code is executed. 
Hence the Alert window with "hello" text will appear at later stages of execution (when the executeScript is executed)
But where as the code in executeScript will run by blocking the following line of code.
Console.WriteLine("Exiting the Sync Call");
                                                                                                                                                                                                                                                                                                                                

"executeAsyncScript -&gt; This method doesn't block the execution of next line of code" That description is misleading . 
executeAsyncScript doesn't return immediately, unless you tell it to as you did in your code because you didn't call the callback asynchronously.
 Had you called the callback from within the setTimeout() call, the next java line would not run until after the timeout.

The main difference between those are that scripts executed with async must explicitly signal they are finished by invoking the provided callback. 
This callback is always injected into the executed function as the last argument.

Execute JavaScript with executeScript() Method
JavascriptExecutor interface comprises of executeScript() method that executes JavaScript in the context of the currently selected frame or window.
Within the script, use document to refer to the current document. Local variables will not be available once the script has finished executing,
though global variables will persist. [1]
If the script has a return value (i.e. if the script contains a return statement), then the following steps will be taken: 
•    For an HTML element, this method returns a WebElement
•    For a decimal, a Double is returned
•    For a non-decimal number, a Long is returned
•    For a boolean, a Boolean is returned
•    For all other cases, a String is returned.
•    For an array, return a List&lt;Object&gt; with each object following the rules above. We support nested lists.
•    Unless the value is null or there is no return value, in which null is returned.

Arguments must be a number, a boolean, a String, WebElement, or a list of any combination of the above.
An exception will be thrown if the arguments do not meet these criteria.





Alert Pop window

JavascriptExecutor js =(JavascriptExecutor)driver;
js.executeScript("alert('SW Test Academy!');");
driver.switchTo().alert().accept();

Get Page Title

JavascriptExecutor js =(JavascriptExecutor)driver;
String title = js.executeScript("return document.title;").toString();
assertThat(driver.getTitle(), is(title));



Refresh Browser Window
JavascriptExecutor js =(JavascriptExecutor)driver;
js.executeScript("history.go(0);");



Scroll-Down Until an Element Displayed

WebElement element = driver.findElement(By.xpath("//*[text()[contains(.,'JavaScript for DoExponent')]]"));
JavascriptExecutor js =(JavascriptExecutor)driver;
js.executeScript("arguments[0].scrollIntoView(true);",element);


Highlight an ElementJava

WebElement sevenButton = driver.findElement(By.name("seven"));
JavascriptExecutor js = (JavascriptExecutor) driver;
js.executeScript("arguments[0].style.border='3px dotted blue'", sevenButton);



Hide and Show an Element

JavascriptExecutor js = (JavascriptExecutor) driver;
//Hide an element
js.executeScript("document.getElementsByName('five')[0].style.display='none'");
//Show an element
js.executeScript("document.getElementsByName('five')[0].style.display='block'");

Navigate to Other Page

JavascriptExecutor js =(JavascriptExecutor)driver;
js.executeScript("window.location = 'http://www.whiteboxlearning.com/'");


Refresh Browser


JavascriptExecutor js = (JavascriptExecutor)driver;
driver.executeScript("history.go(0)");


Click Action


JavascriptExecutor js = (JavascriptExecutor)driver;
js.executeScript("arguments[0].click();", element);

OR
((JavascriptExecutor) driver).executeScript("arguments[0].click();", element);

Generate Alert Pop Window

JavascriptExecutor js = (JavascriptExecutor)driver;
js.executeScript("alert('hello world');");

driver.switchTo().alert.accept();

Get InnerText of a Webpage

JavaScript

JavascriptExecutor js = (JavascriptExecutor)driver;
string sText =  js.executeScript("return document.documentElement.innerText;").toString();


Scroll Page

JavaScript

  JavascriptExecutor js = (JavascriptExecutor)driver;
  //Vertical scroll - down by 150  pixels
  js.executeScript("window.scrollBy(0,150)");


Create an Anonymous Function and add it to the Global Window

JavascriptExecutor js =(JavascriptExecutor)driver;

//Change title with JavascriptExecutor
js.executeScript("document.title='Title is changed manually!';");
assertThat(driver.getTitle(), Is.is("Title is changed manually!"));

//Create an anonymous function that will stored and added into the global window
js.executeScript("window.changetitle = function(){document.title='Title is changed by function!';};"+
        "window.changetitle.call();");
assertThat(driver.getTitle(), Is.is("Title is changed by function!"));

//Change title manually
js.executeScript("document.title='Title is changed manually!';");
assertThat(driver.getTitle(), Is.is("Title is changed manually!"));

//Change title with Function
js. executeScript ("window.changetitle.call();");
assertThat(driver.getTitle(), Is.is("Title is changed by function!"));

JavascriptExecutor js =(JavascriptExecutor)driver;
 
//Change title with JavascriptExecutor
js.executeScript("document.title='Title is changed manually!';");
assertThat(driver.getTitle(), Is.is("Title is changed manually!"));
 
//Create an anonymous function that will stored and added into the global window
js.executeScript("window.changetitle = function(){document.title='Title is changed by function!';};"+
        "window.changetitle.call();");
assertThat(driver.getTitle(), Is.is("Title is changed by function!"));
 
//Change title manually
js.executeScript("document.title='Title is changed manually!';");
assertThat(driver.getTitle(), Is.is("Title is changed manually!"));
 
//Change title with Function
js. executeScript ("window.changetitle.call();");
assertThat(driver.getTitle(), Is.is("Title is changed by function!"));



Execute JavaScript with executeAsyncScript() Method
JavascriptExecutor interface comprises of executeAsyncScript() method that is called an additional final argument “arguments[arguments.length-1];”
which is a callback function to signal that async execution has finished. We have to call from JavaScript, to tell Webdriver,
that our Asynchronous execution has finished.
If we do not do that, then executeAsyncScpript will timeout and throw a timeout exception.

The first argument passed to the callback function will be used as the script’s result. This value will be handled as follows: [1]

For an HTML element, this method returns a WebElement
For a number, a Long is returned
For a boolean, a Boolean is returned
For all other cases, a String is returned.
For an array, return a List&lt;Object&gt; with each object following the rules above. We support nested lists.
Unless the value is null or there is no return value, in which null is returned
Before we execute AsyncScript, we have to make sure to set the script timeout. Its default is 0. If we do not set a script timeout, 
our executeAsyncScript will immediately timeout and it won’t work.



Build and perform-
single operation no need to use build...build for two or more operations in a single step
Actions builder = new Actions(driver); 
builder.clickAndHold(element1)
.clickAndHold(element2)
.click()
.build()
.perform();
in the above code we are performing more than one operations so we have to use build() to compile 
all the actions into a single step. Thus build() method is used compile all the listed actions into a single step. 



WE CAN SET PRIORITIES FOR GROUP.

WebDriver facilitates the user with the following methods to check the visibility of the web elements.
These web elements can be buttons, dropboxes, checkboxes, radio buttons, labels etc.

isDisplayed()
isSelected()
isEnabled()
isDisplayed() is the method used to verify presence of a web element within the webpage. 
The method returns a “true” value if the specified web element is present on the web page and a “false” value if the web element 
is not present on the web page.
isDisplayed() is capable to check for the presence of all kinds of web elements available.
isEnabled() is the method used to verify if the web element is enabled or disabled within the webpage.
isEnabled() is primarily used with buttons.
isSelected() is the method used to verify if the web element is selected or not. isSelected() 
method is pre-dominantly used with radio buttons, dropdowns and checkboxes.

Launch the web browser and open the application under test – http://google.com
Verify the web page title
Verify if the “Google Search” button is displayed
Enter the keyword in the “Google Search” text box by which we would want to make the request
Verify that the “Search button” is displayed and enabled
Based on visibility of the Search button, click on the search button


Actions action = new Actions(dr);
        action.sendKeys(Keys.PAGE_DOWN);
        Thread.sleep(5000);
        action.click(driver.findElement(By.partialLinkText("Google"))).perform();

getAttribute() returns the value of a specified attribute on the element. 
If the given attribute does not exist, the value returned will either be null or "" (the empty string); see Notes for details.

Code:-
  JavascriptExecutor js = (JavascriptExecutor)driver;
  
  js.executeScript("window.scrollBy(0,50)");

Note:- for scrolling till the bottom of the page we can use the code like
js.executeScript("window.scrollBy(0,document.body.scrollHeight)");


Scroll Down:

import org.openqa.selenium.JavascriptExecutor;
WebDriver driver = new FirefoxDriver();
JavascriptExecutor jse = (JavascriptExecutor)driver;
jse.executeScript("scroll(0, 250)"); //y value '250' can be altered

Scroll up:

JavascriptExecutor jse = (JavascriptExecutor)driver;
jse.executeScript("scroll(250, 0)"); //x value '250' can be altered

Scroll bottom of the Page:

JavascriptExecutor jse = (JavascriptExecutor)driver;
jse.executeScript("window.scrollTo(0,Math.max(document.documentElement.scrollHeight,document.body.scrollHeight,document.documentElement.clientHeight));");
(or)
Actions actions = new Actions(driver);
actions.keyDown(Keys.CONTROL).sendKeys(Keys.END).perform();

Full scroll to bottom in slow motion:

for (int second = 0;; second++) {
        if(second &gt;=60){
            break;
        }
            ((JavascriptExecutor) driver).executeScript("window.scrollBy(0,400)", ""); //y value '400' can be altered
            Thread.sleep(3000);
}
(or)
JavascriptExecutor jse = (JavascriptExecutor)driver;
for (int second = 0;; second++) {
        if(second &gt;=60){
            break;
        }
            jse.executeScript("window.scrollBy(0,800)", ""); //y value '800' can be altered
            Thread.sleep(3000);
}

Scroll automatically to your WebElement:

Point hoverItem =driver.findElement(By.xpath("Value")).getLocation();
((JavascriptExecutor)driver).executeScript("return window.title;");    
Thread.sleep(6000);
((JavascriptExecutor)driver).executeScript("window.scrollBy(0,"+(hoverItem.getY())+");"); 
// Adjust your page view by making changes right over here (hoverItem.getY()-400)
(or)
((JavascriptExecutor)driver).executeScript("arguments[0].scrollIntoView();", driver.findElement(By.xpath("Value')]")));
(or)
WebElement element = driver.findElement(By.xpath("Value"));
Coordinates coordinate = ((Locatable)element).getCoordinates(); 
coordinate.onPage(); 
coordinate.inViewPort();

driver.switchTo().alert().accept();
driver.switchTo().alert().dismiss();

How do we generate reports in Selenium?
By using TestNG framework we can generate Reports in Index.html.


HOW TO SEND TEXT WITHOUT SENDKEYS()?

JavascriptExecutor jse = (JavascriptExecutor) driver;
jse.executeScript("document.getElementById('email').value = 'Name@gmail.com';");

WrapsDriver wrappedElement=(WrapsDriver)element;
JavascriptExecuter driver =(JavaScriptExecutor)wrappedElement.getWrapedDriver;
driver.executeScript(arguments[0].setAttribute(arguments[1],arguments[2]",element,
                                    attributeName,value);
}

or
JavascriptExecutor jse = (JavascriptExecutor) driver;
jse.executeScript("document.getElementById('email').value = 'Name@gmail.com';");


HOW TO OPEN BROWSER INTERNALLY AND EXECUTE YOUR TEST CASE:
 
        WebDriver driver;
        
        
        driver = new HtmlUnitDriver();
        
        
        driver.get("http://google.com");
        
        
        WebElement searchText = driver.findElement(By.name("q"));
        searchText.sendKeys("HtmlUnitDriver");
		
Benefits of Html Unit Driver:
Since it is not using any GUI to test, your tests will run in background without any visual interruption
Compared to all other instances execution is faster
To run your tests through HtmlUnit driver you can also select other browser versions
It is platform independent and easier to run several tests concurrently. Ideal for Load Testing.


when might i choose a headless browser?

Why might we choose a headless browser?

If some of the following evaluated to true and you viewed them as important:

faster to start
more reliable over repeated runs
easier to setup
easier to run as part of the CI process than a real browser
fewer side-effects to tidy up in the event of failure e.g. browser windows left open
the functionality uses such basic HTML that it doesn’t need a ‘full’ browser
run task in background without a browser popping up
etc.
…then a headless browser might meet your needs.

		
HOVER MOUSE FROM HEADER MENU TO SUBMENU:

Actions actions = new Actions(driver);
WebElement header = driver.findElement(By.id("header"));
actions.moveToElement(header);

WebElement subMenu = driver.findElement(By.id("submenu"));
actions.moveToElement(subMenu);
actions.click().build().perform();

OR

Actions action = new Actions(driver);
WebElement headMenu = driver.findElement(By.id("headMenu"));
action.moveToElement(headMenu).moveToElement(driver.findElement(By.id("subMenu"))).click().build().perform();		
		
		
How to handle AJAX controls in webdriver?
AJAX stands for Asynchronous JavaScript and AJAX allows the Web page to retrieve small amounts of data from the server without reloading the entire page.
In AJAX driven web applications, data is retrieved from server without refreshing the page.

When we perform any action on Ajax controls, using Wait commands will not work as the page is not actually refreshed here. 
Pausing the test execution using threads for a certain period of time is also not a good approach as web element might appear 
later or earlier than the stipulated period of time depending on the system’s responsiveness, load or other uncontrolled factors of the moment, 
leads to test failures.

The best approach would be to wait for the required element in a dynamic period and then continue the test execution as soon as the element is found/visible.

This can done achieved with WebDriverWait in combination with ExpectedCondition , the best way to wait for an element dynamically, 
checking for the condition every second and continuing to the next command in the script as soon as the condition is met.

There are many methods which are available to use with wait.until(ExpectedConditions.anyCondition); The below is the image 
for the number of methods which are available.


Syntax:

WebDriverWait wait = new WebDriverWait(driver, waitTime);
wait.until(ExpectedConditions.presenceOfElementLocated(locator));

Syntax:

WebDriverWait wait = new WebDriverWait(driver, waitTime);
wait.until(ExpectedConditions.visibilityOfElementLocated(locator));


Some times we may also need to check if the element is invisible or not. To do this we need use the below :

Syntax:

WebDriverWait wait = new WebDriverWait(driver, waitTime);
wait.until(ExpectedConditions.invisibilityOfElementLocated(locator));

The below one is used to wait for the element to be clickable.

Syntax:

WebDriverWait wait = new WebDriverWait(driver, waitTime);
wait.until(ExpectedConditions.elementToBeClickable(locator))



OPTIONS:
// Clicking on one of the items in the list options

WebElement subLinkOption=driver.findElement(By.id("id of the sub link"));
subLinkOption.click();



You can try using the WebDriver.Support SelectElement found in OpenQA.Selenium.Support.UI.
Selected namespace to access the option list of a select list:
During UI test automation you will need to write tests that validate the options that are present in a select tag.
Getting all the options in the select tag is very simple using 
In the test you will create a Select object 
 Select selectColor = new Select(pageObject.noOfColors);
         List&lt;WebElement&gt; optionSelect = selectColor.getOptions();

IWebElement elem = driver.FindElement(By.XPath("//select[@name='time_zone']"));

SelectElement selectList = new SelectElement(elem);
IList&lt;IWebElement&gt; options = selectList.Options;
You can then access each option as an IWebElement, such as:

IWebElement firstOption = options[0];
Assert.AreEqual(firstOption.GetAttribute("value"), "-09:00");

		
Select select = new Select(driver.findElement(By.id("searchDropdownBox")));

select.getOptions();//will get all options as List&lt;WebElement&gt;
		
		
Here is code in Java to get all options in dropdown list.

WebElement sel = myD.findElement(By.name("dropdown_name"));
List&lt;WebElement&gt; lists = sel.findElements(By.tagName("option"));
    for(WebElement element: lists)  
    {
        String var2 = tdElement.getText();
        System.out.println(var2);
    }

IList&lt;IWebElement&gt; options = elem.FindElements(By.TagName("option"));
foreach (IWebElement option in options)
{
    Console.WriteLine(option.Text);
}	
		
		
		
Working with dropdowns is that you don't want to work with them as WebElements, 
but instead create a Select element for them. The Select class (java and python documentation)
 includes utility methods that allow you to perform common tasks. We will be working with the following html:

&lt;select id="mySelectID"&gt;
    &lt;option value="Value"&gt;Option&lt;/option&gt;
    &lt;option value="NotValue"&gt;Not Option&lt;/option&gt;
&lt;/select&gt;
Select by option name

Java:

WebElement mySelectElm = driver.findElement(By.id("mySelectID")); 
Select mySelect= new Select(mySelectElm);
selMySelect.selectByVisibleText("Option");	
		
Get the selected option

Java:

WebElement mySelectElm = driver.findElement(By.id("mySelectID")); 
Select mySelect= new Select(mySelectElm);
WebElement option = mySelect.getFirstSelectedOption();
System.out.println(option.getText()); //prints "Option"		
		
Get the list of options

Java:

WebElement mySelectElm = driver.findElement(By.id("mySelectID")); 
Select mySelect= new Select(mySelectElm);
List&lt;WebElement&gt; options = mySelect.getOptions();
for (WebElement option : options) {
    System.out.println(option.getText()); //Prints "Option", followed by "Not Option"
}	
		
		
In this example, we find all the options, iterate over them, and click the one we want. This is useful if you have a more complex criteria.

WebElement mySelectElm = driver.findElement(By.id("mySelectID")); 
Select mySelect= new Select(mySelect);
List&lt;WebElement&gt; options = mySelect.getOptions();
for (WebElement option : options) {
    if (option.getText().equalsIgnoreCase("Option") {
        option.click();
    }
}		
		
Select by option value

Same basic idea, but we can use CSS to select an option by value instead of mucking about with xpath:

Java

WebElement myoption = driver.findElement(By.cssSelector("#mySelectID option[value='Value']"));
myOption.click();		
		
Select by index

Again, easy to do with css selectors:

Java

WebElement myoption = driver.findElement(By.cssSelector("#mySelectID option:nth-child(1)"));
myOption.click();	
		
		
Get the selected option

Hooray for CSS selectors! For legacy reasons, the selector for "selected" is "checked", like a checkbox:

Java:

WebElement myoption = driver.findElement(By.cssSelector("#mySelectID option:checked"));
System.out.println(myoption.getText()); //prints "Option"	
		
Get the list of options

Java:

List&lt;WebElement&gt; options = driver.findElements(By.cssSelector("#mySelectID option"));
for (WebElement option : options) {
    System.out.println(option.getText()); //Prints "Option", followed by "Not Option"
}	
		
		
WEB ELEMENT:
In Selenium WebDriver, before we can interact with any elements, such as click, select, type or verify, we have to first locate the element in question.
WebElement represents an HTML element. HTML documents are made up by HTML elements. HTML elements are written with a start tag,
 with an end tag, with the content in between: &lt;tagname&gt; content &lt;/tagname&gt; Every field, link, image, text etc are all elements.
HTML elements can be nested (elements can contain elements). All HTML documents consist of nested HTML elements.
WebDriver supports different methods of locating elements on html page.
To inspect an element you just have to open the desired web page, right-click the desired element and click on Inspect Element.	
Locator can be termed as an address that identifies a web element uniquely within the webpage. We look into HTML properties of 
a web element which tells the Selenium about the web element it need to perform action on. 
Essentially, most of the selenium commands requires a locator as its one of argument to find a web element,		
Locating Elements with Selenium WebDriver, findElement() method returns a WebElement and findElements() returns a list of WebElements.

1. By ID:
in Java: driver.findElement(By.id("element id"))

2. By CLASS:

How to get the class name of element
You can get the class name of element using firebug add-on software as shown in bellow given image.
in Java: driver.findElement(By.className("element class"))

3. By NAME:
in Java: driver.findElement(By.name("element name"))

4. By TAGNAME:
in Java: driver.findElement(By.tagName("element html tag name"))

5. By CSS Selector:
in Java: driver.findElement(By.cssSelector("css selector"))

6. By Link:
in Java: driver.findElement(By.link("link text"))

7. By XPath:
in Java: driver.findElement(By.xpath("xpath expression"))

CLICK AND SUBMIT:
.click() method :
 You can use .click() method to click on any button.There is no restriction for click buttons.
 That means element's type = "button" or type = "submit", .click() method will works for both.
 If button is inside &lt;form&gt; tag or button is outside &lt;form&gt; tag, the click() method will work.

.submit() method :
we can use .submit() method for only submit form after click on button.
That means element's type = "submit" and button should be inside &lt;form&gt; tag, then only submit() will work.
If element's type = "button" means submit() will not work.
If button outside of the &lt;form&gt; tag means submit() will not work


For Example, Submit() will work if submit button should be inside &lt;form&gt; tag and element type="submit" as below

Submit is for Forms and Click is for Buttons

If you submit using any element of Form, it will automatically find button with type 'submit' of form and click on it.

Submit can be done on any form item and click has to be done Button with type Submit

IF WE USE SUBMIT ON ANY OTHER PLACE...THEN IT WILL NOT WORK.


HOW TO CONCAT TWO METHODS?

public class scannerTest
{
public static void main(String[]args)
{
System..out.println("Enter the name:");
Scanner s = new Scanner(System.in);

String str =s.next();

System.out.println("Enter the age :");

int age = s.nextInt();

concatInputs(str,age);
}

static void concatInputs(String str,int age){
System.out.println("Here is the name "+str+"Your age is " +age);
}
}
}

WRITE A CODE TO GET A BUTTON ELEMENT WHICH IS IN A FORM AND PRINT ITS SIZE AND LOCATION.AND THEN SUBMIT THE FORM:

WebElement button=driver.findElement(By.id("bld"));
Dimension d=button.getSize();
Point p = button.getLocation();
System.out.println("Size"+d.height+ "::"+d.width);
System.out.println("Location"+p.x+"::"+p.y);
button.submit();

HOW TO ADD A COOKIE AND GET A LIST OF COOKIES:

Cookie name = new Cookie("mycookie","123456789123");
driver.manage().addCookie(name);

Set&lt;Cookie&gt; set =

driver.manage().getCookies();
for(Cookie c:set)
{
System.out.println(c);
}

HOW TO GET LOGS:::

Logs log=driver.manage().logs();
Set&lt;String&gt; set1= log.getAvailableLogTypes();
for(String s:set1)
{
LogEntries e = 1og.get(s);
List&lt;LogEntry&gt; log.1=e.getAll();
for(LogEntry log2:log1)
{
System.out.println(l2.getMessage());
}
System.out.println(s);
}


COOKIES::::
Cookies are a way of remembering users and their interaction with the site by storing information in the cookie file as key value pairs.

When testing a website with Selenium WebDriver, sometimes it is necessary to handle cookies, such as creating new cookies,
 updating existing cookies with new information or deleting cookies.



RETRIEVE ALL THE Cookies
public Set&lt;Cookie&gt; getAllCookies() {
   return driver.manage().getCookies();

RETRIEVE A NAMED COOKIE:
public Cookie getCookieNamed(String name) {
   return driver.manage().getCookieNamed(name);
}

RETRIEVE THE VALUE OF A COOKIE
//This method gets the value of a specified cookie
public String getValueOfCookieNamed(String name) {
   return driver.manage().getCookieNamed(name).getValue();
}

ADD A COOKIE
//This method adds or creates a cookie
public void addCookie(String name, String value, String domain, String path, Date expiry) {
   driver.manage().addCookie(
   new Cookie(name, value, domain, path, expiry));
}

ADD A SET OF COOKIES
public void addCookiesToBrowser(Set&lt;Cookie&gt; cookies, String domain) {
   for (Cookie c : cookies) {
      if (c != null) {
         if (c.getDomain().contains(domain)){
            driver.manage().addCookie(
            new Cookie(name, value, domain, path, expiry));
         }
      }
   }
   driver.navigate().refresh();
}

DELETE A SPECIFIC COOKIE
//This method deletes a specific cookie
public void deleteCookieNamed(String name) {
   driver.manage().deleteCookieNamed(name);
}

DELETE ALL COOKIES
//This method deletes all cookies
public void deleteAllCookies() {
   driver.manage().deleteAllCookies();
}

WRITE THE CODE FOR READING AND WRITING TO EXCEL THROUGH SELENIUM ?


FileInputStream fis = new FileInputStream(“path of excel file”);

 Workbook wb = WorkbookFactory.create(fis);

 Sheet s = wb.getSheet("sheetName");

 String value = s.getRow(rowNum).getCell(cellNum).getStringCellValue(); // read data

 s.getRow(rowNum).getCell(cellNum).setCellValue("value to be set"); //write data

 FileOutputStream fos = new FileOutputStream(“path of file”);

 wb.write(fos); //save file


HOW TO GET TYPED TEXT FROM A TEXTBOX ?

Ans- use getAttribute(“value”) method by passing arg as value.
String typedText = driver.findElement(By.xpath("xpath of box")).getAttribute("value"));

HOW DO YOU CLEAR THE CONTENTS OF A TEXTBOX IN SELENIUM ?
Ans- Use clear() method.
driver.findElement(By.xpath("xpath of box")).clear();

WHAT IS THE COMMAND LINE WE HAVE TO WRITE INSIDE A .BAT FILE TO EXECUTE A SELENIUM PROJECT WHEN WE ARE USING TESTNG ?
Ans- java -cp bin;jars/* org.testng.TestNG testng.xml

WHAT IS THE DIFFERENCE BETWEEN TYPE KEYS AND TYPE COMMANDS ?

TypeKeys() will trigger JavaScript event in most of the cases whereas .type() won’t.
Type key populates the value attribute using JavaScript whereas .typekeys() emulates like actual user typing


PARALLEL TESTING IN SELENIUM: cannot guarantee the efficiency..always prefer for grid when doing browser and OS testing parallely.
http://toolsqa.com/selenium-webdriver/testng-multi-browser-cross-browser/

how to test parallely with different operating system?
http://www.guru99.com/introduction-to-selenium-grid.html

Grid is more effective...

How to write xpath dynamically :
http://learn-automation.com/how-to-write-dynamic-xpath-in-selenium/
Absolute XPath: The easiest way of finding the xpath is to use the Browser Inspector tool to locate an element and  get the xpath of it:

XPath Generated by the tool is : /html/body/div[2]/div/div/footer/section[3]/div/ul/li[3]/a


 

Technique 2 | Relative XPath: At times XPath generated by Firebug are too lengthy and you see there is a possibility of getting a shorter XPath.
Above xpath will technically work, but each of those nested relationships will need to be present 100% of the time, or the locator will not function. 
Above choosed xpath is known as Absolute xpath. There is a good chance that your xpath will vary in every release.
It is always better to choose Relative xpath, as it helps us to reduce the chance of element not found exception.

To choose the relative xpath, it is advisable to look for the recent Id attribute. 
This id would be appropriate in this case, so a quality xpath will look like this:  //*[@id=’social-media’]/ul/li[3]/a

Did you notice the difference between the Absolute and Relative xpaths?

Absolute xpath: /html/body/div[2]/div/div/footer/section[3]/div/ul/li[3]/a

Relative xpath: //*[@id=’social-media’]/ul/li[3]/a

Absolute xpath is using single slash at the start of the xpath and relative is using double slash.


 

Difference between single ‘/’ or double ‘//’
A single slash at the start of Xpath instructs XPath engine to look for element starting from root node.

A double slash at the start of Xpath instructs XPath engine to search look for matching element anywhere in the XML document.

//input[contains(@class, '-userfield-')].




ITest result...result.getName...for screenshot.

window handling and iframe handling.

Exceptions


List out the test types that are supported by Selenium?

For web based application testing selenium can be used

The test types can be supported are

a) Functional

b) Regression

For post release validation with continuous integration automation tool could be used

a) Jenkins

b) Hudson

c) Quick Build

d) CruiseCont



Explain what is assertion in Selenium and what are the types of assertion?

Assertion is used as a  verification point. It verifies that the state of the application conforms to what is expected. 
The types of assertion are “assert” , “verify” and “waifFor”.


What is the difference between type keys and type commands ?

TypeKeys() will trigger JavaScript event in most of the cases whereas .type() won’t. Type key populates 
the value attribute using JavaScript whereas .typekeys() emulates like actual user typing




What does SIDE stand for?

Selenium IDE.

Explain how you can find broken images in a page using Selenium Web driver ?

To find the broken images in a page using Selenium web driver is

Get Xpath and get all the links in the page using tag name
In the page click on each and every link
Look for 404/500 in the target page title

Explain how you can handle colors in web driver?

To handle colors in web driver you can use

Use getCssValue(arg0) function to get the colors by sending ‘color’ string as an argument

What is the difference between getWindowhandles() and getwindowhandle() ?

getwindowhandles(): It is used to get the address of all the open browser and its return type is iterator&lt;String&gt;

getwindowhandle(): It is used to get the address of the current browser where the control is and return type is string

Explain how to iterate through options in test script?

To iterate through options in test script you can loop features of the programming language, for example to type different 
test data in a text box you can use “for” loop in Java

// test data collection in an array

String[ ] testData = { “test1” , “test2” , “test3” } ;

// iterate through each test data

For  (string s: test data) { selenium.type ( “elementLocator”, testData) ; }



How can you prepare customized html report using TestNG in hybrid framework ?

There are three ways

Junit: With the help of ANT
TestNG: Using inbuilt default.html to get the HTML report. Also XST reports from ANT, Selenium, TestNG combinations
Using our own customized reports using XSL jar for converting XML content to HTML

What is Selenese and what are the types of Selenese ?

Selenese is a selenium set of command which are used for running the test

There are three types of Selenese

Actions: It is used for performing the operations and interactions with the target elements
Assertions: It is used as a check points
Accessors: It is used for storing the values in a variable

How can you retrive the message in an alert box ?

You can use the storeAlert command which will fetch the message of the alert pop up and store it in a variable.

 Why to use TestNG with Selenium RC ?

If you want full automation against different server and client platforms, 
You need a way to invoke the tests from a command line process, reports that tells you what happened and flexibility 
in how you create your test suites. TestNG gives that flexibility.


Mention in what ways you can customize TestNG report?

You can customize TestNG report in two ways,

Using ITestListener Interface
Using IReporter Interface

To generate pdf reports mention what Java API is required?

To generate pdf reports, you need Java API IText.

Mention what is Listeners in Selenium WebDriver?

In Selenium WebDriver, Listeners "listen" to the event defined in the selenium script and behave accordingly. 
It allows customizing TestNG reports or logs. There are two main listeners i.e. WebDriver Listeners and TestNG Listeners.


Mention what are the types of Listeners in TestNG?

The types of Listeners in TestNG are,

IAnnotationTransformer
IAnnotationTransformer2
IConfigurable
IConfigurationListener
IExecutionListener
IHookable
IInvokedMethodListener
IInvokedMethodListener2
IMethodInterceptor
IReporter
ISuiteListener
ITestListener


For Database Testing in Selenium Webdriver what API is required?

For Database Testing in Selenium Webdriver, you need JDBC (Java Database Connectivity) API. 
It allows you to execute SQL statements.


Mention why do you need Session Handling while working with Selenium?

While working with Selenium, you need Session Handling. This is because, during test execution, 
the Selenium WebDriver has to interact with the browser all the time to execute given commands. At the time of execution, 
it is also possible that, before current execution completes, someone else starts execution of another script, in the same machine 
and in the same type of browser. So to avoid such situation you need Session Handling.


Mention what are the advantages of Using Git Hub For Selenium?

The advantages of Using Git Hub for Selenium are

Multiple people when they work on the same project they can update project details and inform other team members simultaneously.
Jenkins can help you to build the project from the remote repository regularly. This helps you to keep track of failed builds.


Give the example for method overload in WebDriver.

Ans- frame(string), frame(int), frame(WebElement).


How do you upload a file?

Ans- To upload a file we can use sendKeys() method.


driver.findElement(By.xpath(“input field”)).sendKeys(“path of the file which u want to upload”);




Write the code for Reading and Writing to Excel through Selenium ?


FileInputStream fis = new FileInputStream(“path of excel file”);

 Workbook wb = WorkbookFactory.create(fis);

 Sheet s = wb.getSheet("sheetName");

 String value = s.getRow(rowNum).getCell(cellNum).getStringCellValue(); // read data

 s.getRow(rowNum).getCell(cellNum).setCellValue("value to be set"); //write data

 FileOutputStream fos = new FileOutputStream(“path of file”);

 wb.write(fos); //save file

 
 

abstract class and interface differences and examples. when we will choose what

method overloading and overiding

collection list set example..array list difference

hash set tree...hash map..hash table and tree map...

example to use stack in java.


Web driver...
mainly 
framework--mock 

Find the index of no greater than n in a given sorted array..                         
Explain linear search                         
For given 3 sides find if it's which kind of triangle?




int sideA;
int sideB;
int sideC;






INTERVIEW QUESTIONS MOCK


1.EXPLAIN ABOUT YOUR FRAMEWORK?
2.WHAT ARE THE CHALLENGES YOU FACED IN YOUR LATEST PROJECT?
3.TEST CASES FOR SEARCH BOX?
4.RELEASE IS NOT ON TIME?
5.WHAT IS DIFF BETWEEN BUG AND ENHANCEMENT?
6.FUNCTIONALITY OR  USER STORIES YOU AUTOMATED?


Difference between enhancement and bug?
Bug: A software bug is the common term used to describe an 
error, flaw, mistake, failure, or fault in a computer 
program or system that produces an incorrect or unexpected 
result, or causes it to behave in unintended ways.


Enhancement: Enhancement is something like adding some new 
functionality to the application or making some changes to 
the application/product for better performance and 
convenience to the end user.


Enhancement 
Adding new functionality or changing existing functionality in a way that makes the software application more efficient,
faster, more usable, more useful, and/or more desirable.  (Makes the application subjectively and/or objectively "better").


Defects/Bugs (2 types):
Technical
A definable problem within the code or database layer of a software application that causes the 
application to not work as expected or give incorrect output.


Functional
Existing functionality or feature that is not serving its expected purpose (i.e., it's broken) or lacking *critical* 
functionality to accomplish a particular task.  
Whereas implementing an Enhancement makes the application "better", fixing a Functional Defect makes the application "correct", not necessarily "better".




http://softwaretestingfundam
entals.com/test-plan/
http://www.guru99.com/maven-jenkins-with-selenium-complete-tutorial.html


How to switch between the windows?
private void handlingMultipleWindows(String windowTitle) {
Set&lt;String&gt; windows = driver.getWindowHandles();
for (String window : windows) {
driver.switchTo().window(window);
if (driver.getTitle().contains(windowTitle)) { return; } } }




TEST CASES FOR SEARCH BOX
* Check for cursor on the search text box in the starting 
postition
* Check whether the blank space is trimmed on starting of 
the first word in the text box
* On no entry done in text box, check the engine does not 
display any result
* Check no result is displayed on only single special 
character is entered in text box
* Check the search response time
* Check the total number of results to be displayed in one 
page
* Check the page resolution
*Check the URLs' uncheked are coloured BLUE &amp; checked are 
Maroon
*Check for total number of results found for a search
*Check whether the search text box is present on top &amp; 
bottom of the page



automation framework...modular..factory...design patterns used
patterns you have used..using the switch case
singleton...use for db connection...

you have to deal with running the test scripts for multiple environments..how do you did all kinds of testing..
different files in testng.xml...suite.xml...etc.
5 assert...1st not run...then how to use them...then soft assertions and hard assertions.


maven surefire plugin...testng with different parameters...maven surefire.
explain...jenkins.

wblautomation...



Sum of the first n numbers is equal to the sum of the last n numbers.



[3, 2, 4, 3, 5, 3, 4, 4, 1]






sum += forwardSum.
j += backwardSum





</p>
</body></html>